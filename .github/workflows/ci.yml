name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  frontend-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        test-group: [unit, integration]
      fail-fast: false
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Configure Git
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        
    - name: Cache node modules
      uses: actions/cache@v3
      id: npm-cache
      with:
        path: |
          ./frontend/node_modules
          ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('./frontend/package.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Cache Next.js build
      uses: actions/cache@v3
      with:
        path: |
          ./frontend/.next/cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('./frontend/**.[jt]s', './frontend/**.[jt]sx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-
    
    - name: Install dependencies
      run: npm install
    
    - name: Run linting
      if: matrix.test-group == 'unit'
      run: npm run lint
    
    - name: Run unit tests
      if: matrix.test-group == 'unit'
      run: npm test -- --testPathPattern='^(?!.*?\\.(int|e2e)\\.test).*\\.test\\.[jt]sx?$'
    
    - name: Run integration tests
      if: matrix.test-group == 'integration'
      run: npm test -- --testPathPattern='.*\\.int\\.test\\.[jt]sx?$'
    
    - name: Build
      if: matrix.test-group == 'unit'
      run: npm run build

  backend-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        test-group: [unit, integration, e2e]
      fail-fast: false
    defaults:
      run:
        working-directory: ./backend

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: minipos_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Configure Git
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        
    - name: Cache node modules
      uses: actions/cache@v3
      id: npm-cache-backend
      with:
        path: |
          ./backend/node_modules
          ~/.npm
        key: ${{ runner.os }}-node-backend-${{ hashFiles('./backend/package.json') }}
        restore-keys: |
          ${{ runner.os }}-node-backend-
    
    - name: Cache TypeScript build
      uses: actions/cache@v3
      with:
        path: |
          ./backend/dist
          ./backend/*.tsbuildinfo
        key: ${{ runner.os }}-tsc-${{ hashFiles('./backend/src/**/*.ts') }}
        restore-keys: |
          ${{ runner.os }}-tsc-
    
    - name: Install dependencies
      run: npm install
    
    - name: Run linting
      if: matrix.test-group == 'unit'
      run: npm run lint
    
    - name: Run unit tests
      if: matrix.test-group == 'unit'
      run: npm test -- --testPathPattern='^(?!.*?\\.(int|e2e)\\.test).*\\.test\\.ts$'
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/minipos_test
    
    - name: Run integration tests
      if: matrix.test-group == 'integration'
      run: npm test -- --testPathPattern='.*\\.int\\.test\\.ts$'
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/minipos_test
    
    - name: Run e2e tests
      if: matrix.test-group == 'e2e'
      run: npm test -- --testPathPattern='.*\\.e2e\\.test\\.ts$'
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/minipos_test
    
    - name: Build
      if: matrix.test-group == 'unit'
      run: npm run build

  deploy:
    needs: [frontend-tests, backend-tests]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and push Docker images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build and push frontend
        docker build -t $ECR_REGISTRY/minipos-frontend:$IMAGE_TAG ./frontend
        docker push $ECR_REGISTRY/minipos-frontend:$IMAGE_TAG
        
        # Build and push backend
        docker build -t $ECR_REGISTRY/minipos-backend:$IMAGE_TAG ./backend
        docker push $ECR_REGISTRY/minipos-backend:$IMAGE_TAG
    
    - name: Update ECS services
      run: |
        aws ecs update-service --cluster minipos-cluster --service frontend-service --force-new-deployment
        aws ecs update-service --cluster minipos-cluster --service backend-service --force-new-deployment 
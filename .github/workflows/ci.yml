name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  frontend-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        test-group: [unit, integration]
      fail-fast: false
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Configure Git
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        
    - name: Cache node modules
      uses: actions/cache@v3
      id: npm-cache
      with:
        path: |
          ./frontend/node_modules
          ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('./frontend/package.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Cache Next.js build
      uses: actions/cache@v3
      with:
        path: |
          ./frontend/.next/cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('./frontend/**.[jt]s', './frontend/**.[jt]sx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-
    
    - name: Install dependencies
      run: npm install
    
    - name: Run linting
      if: matrix.test-group == 'unit'
      run: npm run lint
    
    - name: Run unit tests
      if: matrix.test-group == 'unit'
      run: npm test -- --testPathPattern='^(?!.*?\\.(int|e2e)\\.test).*\\.test\\.[jt]sx?$'
    
    - name: Run integration tests
      if: matrix.test-group == 'integration'
      run: npm test -- --testPathPattern='.*\\.int\\.test\\.[jt]sx?$'
    
    - name: Build
      if: matrix.test-group == 'unit'
      run: npm run build

  backend-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        test-group: [unit, integration, e2e]
      fail-fast: false
    defaults:
      run:
        working-directory: ./backend

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: minipos_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Configure Git
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        
    - name: Cache node modules
      uses: actions/cache@v3
      id: npm-cache-backend
      with:
        path: |
          ./backend/node_modules
          ~/.npm
        key: ${{ runner.os }}-node-backend-${{ hashFiles('./backend/package.json') }}
        restore-keys: |
          ${{ runner.os }}-node-backend-
    
    - name: Cache TypeScript build
      uses: actions/cache@v3
      with:
        path: |
          ./backend/dist
          ./backend/*.tsbuildinfo
        key: ${{ runner.os }}-tsc-${{ hashFiles('./backend/src/**/*.ts') }}
        restore-keys: |
          ${{ runner.os }}-tsc-
    
    - name: Install dependencies
      run: npm install
    
    - name: Run linting
      if: matrix.test-group == 'unit'
      run: npm run lint
    
    - name: Run unit tests
      if: matrix.test-group == 'unit'
      run: npm test -- --testPathPattern='^(?!.*?\\.(int|e2e)\\.test).*\\.test\\.ts$'
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/minipos_test
    
    - name: Run integration tests
      if: matrix.test-group == 'integration'
      run: npm test -- --testPathPattern='.*\\.int\\.test\\.ts$'
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/minipos_test
    
    - name: Run e2e tests
      if: matrix.test-group == 'e2e'
      run: npm test -- --testPathPattern='.*\\.e2e\\.test\\.ts$'
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/minipos_test
    
    - name: Build
      if: matrix.test-group == 'unit'
      run: npm run build

  deploy:
    needs: [frontend-tests, backend-tests]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup SSH key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
    
    - name: Build Docker images
      run: |
        # Build frontend
        docker build -t minipos-frontend:latest ./frontend
        docker save minipos-frontend:latest > frontend-image.tar
        
        # Build backend
        docker build -t minipos-backend:latest ./backend
        docker save minipos-backend:latest > backend-image.tar
    
    - name: Transfer Docker images
      run: |
        scp frontend-image.tar ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
        scp backend-image.tar ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
    
    - name: Deploy to server
      run: |
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} '
          # Load images
          docker load < /tmp/frontend-image.tar
          docker load < /tmp/backend-image.tar
          
          # Stop existing containers
          docker-compose down || true
          
          # Start new containers
          docker-compose up -d
          
          # Cleanup
          rm /tmp/frontend-image.tar
          rm /tmp/backend-image.tar
        ' 